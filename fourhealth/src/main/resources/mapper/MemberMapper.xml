<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fourhealth.mapper.MemberMapper">

	<!--공통 회원데이터 resultMap  -->
    <resultMap type="MemberDto" 		id="resultMapMember">
        <result column="user_id" 		property="memberId"/>
        <result column="user_pw" 		property="memberPw"/>
        <result column="user_level_code" property="memberLevel"/>
        <result column="user_name" 		property="memberName"/>
        <result column="user_addr" 		property="memberAddr"/>
        <result column="user_email"		property="memberEmail"/>
        <result column="user_nickname" 	property="memberNickname"/>
        <result column="user_birth" 	property="memberBirth"/>
        <result column="user_gender" 	property="memberGender"/>
        <result column="user_main_bank" property="memberMainBank"/>
        <result column="user_bank_number" property="memberBankNumber"/>
        <result column="user_bank_master" property="memberBankMaster"/>
        <result column="user_reg_date" 	property="memberRegDate"/>
    </resultMap>
    
    <!-- 관리자페이지 단에서 삭제를 위한 쿼리 1~3 -->
    <delete id="removeMasterMember" parameterType="String">
		DELETE
		FROM
			tb_common_user
		WHERE
			user_id = #{memberId};
	</delete>
	
	<!-- <delete id="removeMasterMsg" parameterType="String">
		DELETE
		FROM
			tb_msg
		WHERE
			user_id = #{msg_code};
	</delete> -->
	
	<delete id="removeMemberById" parameterType="String">
		DELETE
		FROM
			tb_common_user
		WHERE
			user_id = #{memberId};
	</delete>
	
	
	
	<!-- 
	<delete id="removeLoginById" parameterType="String">
		DELETE
		FROM
			tb_login
		WHERE
			login_id = #{memberId};
	</delete>

	<delete id="removeOrderById" parameterType="String">
		DELETE
		FROM
			tb_order
		WHERE
			o_id = #{memberId};
	</delete>

	<delete id="removeGoodsById" parameterType="String">
		DELETE
		FROM
			tb_goods
		WHERE
			g_seller_id = #{memberId};
	</delete>

	<delete id="removeMemberById" parameterType="String">
		DELETE
		FROM
			tb_member
		WHERE
			m_id = #{memberId};
	</delete> -->
	
	
	<!-- 로그인 후 메인화면 단에서 사용자 플랫폼 레벨 체크  -->
	<!-- <select id="viewMember"  parameterType="MemberDto">
		SELECT 
			p.user_platform_grade_name 
		FROM 
			tb_grade_platform_user AS p
		INNER JOIN
			tb_user AS u
		ON
			p.user_platform_grade_code = u.user_platform_grade_code  
		WHERE 
			u.user_id = #{memberId};
	</select> -->
    
  <!-- 전체회원 단에서 회원 수정 -->
<!-- 	<update id="modifyMasterMember" parameterType="MemberDto">c
		UPDATE tb_common_user
		<trim prefix="SET" suffixOverrides=",">
			<if test="memberPw != null and memberPw neq ''.toString()">
				user_pw	= #{memberPw},
			</if>
			<if test="memberName != null and memberName neq ''.toString()">
				user_name	= #{memberName},
			</if>
			<if test="memberLevel != null and memberLevel neq ''.toString()">
				user_level_code= #{memberLevel},
			</if>
			<if test="memberEmail != null and memberEmail neq ''.toString()">
				user_email= #{memberEmail},
			</if>
			<if test="memberAddr != null and memberAddr neq ''.toString()">
				user_addr	= #{memberAddr},
			</if>
		</trim>
		WHERE
			user_id = #{memberId}
	</update> -->
	
	<!-- 관리자페이지 단에서 회원 수정  -->
	<update id="modifyMasterMember" parameterType="MemberDto">
		UPDATE tb_common_user
		SET 
			 user_pw		= #{memberPw}
			,user_name		= #{memberName}
			,user_email		= #{memberEmail}
			,user_addr		= #{memberAddr}
		WHERE
			user_id = #{memberId}
	</update>
	
	
   <!-- 전체 회원 조회 -->
	<select id="viewMember" resultMap="resultMapMember" >
	SELECT
			user_id, 
			user_level_code, 
			user_pw, 
			user_name, 
			user_addr, 
			user_nickname, 
			user_phone, 
			user_email, 
			user_birth, 
			user_gender, 
			user_main_bank, 
			user_bank_number, 
			user_bank_master, 
			user_reg_date
	FROM 
		tb_common_user;
	</select>
	
	
	<select id="getMemberById" parameterType="String" resultMap="resultMapMember">
	SELECT
			user_id, 
			user_level_code, 
			user_pw, 
			user_name, 
			user_addr, 
			user_nickname, 
			user_phone, 
			user_email, 
			user_birth, 
			user_gender, 
			user_main_bank, 
			user_bank_number, 
			user_bank_master, 
			user_reg_date
		FROM 
			tb_common_user
		WHERE
			user_id = #{userId};
	</select>
	
	
		
	<!-- 아이디 중복 체크 : 아이디가 있으면 1 count, 없으면 0 -->
	<select id = "userIdCheck" parameterType="String" resultType="int">
	SELECT 
		COUNT(*) 
	FROM tb_common_user AS u
		WHERE u.user_id = #{userId};
	</select>
	
	
	<!-- 회원가입 -->
	<insert id="addMember" parameterType="MemberDto">
		INSERT INTO tb_common_user
			(user_id, 
			user_level_code, 
			user_pw, 
			user_name, 
			user_addr, 
			user_nickname, 
			user_phone, 
			user_email, 
			user_birth, 
			user_gender, 
			user_main_bank, 
			user_bank_number, 
			user_bank_master, 
			user_reg_date)
	VALUES (
			#{memberId}, 
			#{memberLevel}, 
			#{memberPw}, 
			#{memberName}, 
			#{memberAddr}, 
			#{memberNickname}, 
			#{memberPhone}, 
			#{memberEmail}, 
			#{memberBirth},
			#{memberGender}, 
			null, 
			null, 
			null, 
			NOW());
	</insert>
	
	<!--  	 일단 생략
	<select id="trainerGetMatchingUserList" parameterType="String" resultMap="resultMapNoticePromotionTrainer">
	SELECT
		mut.trainer_user_matching_code AS 'trainerUserMatchingCode',
		mut.user_id AS 'userId'
	FROM
		tb_matching_user_trainer AS mut
	INNER JOIN
		tb_notice_promotion_trainer AS npt
	ON
		mut.trainer_promotion_notice_code = npt.trainer_promotion_notice_code
	where 
		mut.trainer_promotion_notice_code =#{promotionCode};
	</select>
	 -->
	
	
</mapper>