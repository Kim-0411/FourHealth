<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fourhealth.mapper.MemberMapper">

	<resultMap type="TrainerDto"	 id="resultMapTrainer">
		<result column="user_id" 							property="userId"/>
		<result column="trainer_platform_grade_code" 		property="trainerPlatformGradeCode"/>
		<result column="trainer_access_code" 				property="trainerAccessCode"/>
		<result column="trainer_gym" 						property="trainerGym"/>
		<result column="trainer_gym_address" 				property="trainerGymAddress"/>
		<result column="trainer_access_reason" 				property="trainerAccessReason"/>
		<result column="trainer_access_reg_date" 			property="trainerAccessRegDate"/>
		<result column="trainer_reg_date" 					property="trainerRegDate"/>
	</resultMap>

	<resultMap type="UserDto" 		id="resultMapUser">
		<result column="user_id" 							property="userId"/>
		<result column="user_platform_grade_code" 			property="userPlatFormGradeCode"/>
		<result column="user_status_level_code" 			property="userStatusLevelCode"/>
		<result column="user_first_height" 					property="userFirstHeight"/>
		<result column="user_first_weight" 					property="userFirstWeight"/>
		<result column="user_first_goal" 					property="userFirstGoal"/>
		<result column="user_first_bmi" 					property="userFirstBmi"/>
		<result column="user_reg_date" 						property="userRegDate"/>
	</resultMap>

	<!--공통 회원데이터 resultMap  -->
    <resultMap type="MemberDto" 		id="resultMapMember">
        <result column="user_id" 							property="memberId"/>
        <result column="user_pw" 							property="memberPw"/>
        <result column="user_level_code"					property="memberLevel"/>
        <result column="user_name" 							property="memberName"/>
        <result column="user_addr" 							property="memberAddr"/>
        <result column="user_email"							property="memberEmail"/>
        <result column="user_nickname" 						property="memberNickname"/>
        <result column="user_birth" 						property="memberBirth"/>
        <result column="user_gender" 						property="memberGender"/>
        <result column="user_last_login_date" 				property="userLastLoginDate"/>
		<result column="user_phone"            				property="memberPhone" /> 
        <result column="user_reg_date" 						property="memberRegDate"/>
    </resultMap>


	<!-- 관리자 단에서 트레이너 비승인 조회-->
	 <select id="viewAccessTrainerList"  resultMap="resultMapTrainer" >
	SELECT 
		user_id,
		trainer_platform_grade_code ,
		trainer_access_code,
		trainer_gym ,
		trainer_gym_address ,
		trainer_access_reason ,
		trainer_access_reg_date ,
		trainer_reg_date 
	FROM
		tb_trainer
	WHERE
		trainer_access_reg_date IS NULL;
	</select> 
    
    <!-- 관리자페이지 단에서 삭제를 위한 쿼리 1,2,3 -->
    <!-- <delete id="removeMasterMember" parameterType="String">
		/* 관리자페이지 단에서 삭제를 위한 쿼리 1,2,3 */
		DELETE
		FROM
			tb_common_user
		WHERE
			user_id = #{memberId};
	</delete>
	
	<delete id="removeMasterMsg" parameterType="String">
		DELETE
		FROM
			tb_msg
		WHERE
			user_id = #{msg_code};
	</delete>
	
	<delete id="removeMemberById" parameterType="String">
		DELETE
		FROM
			tb_common_user
		WHERE
			user_id = #{memberId};
	</delete> -->

	<!-- 관리자페이지 단에서 사용자 수정  -->
	<update id="modifyMasterUser" parameterType="MemberDto">
		UPDATE tb_common_user
		SET 
			 user_pw		= #{memberPw}
			,user_name		= #{memberName}
			,user_email		= #{memberEmail}
			,user_addr		= #{memberAddr}
		WHERE
			user_id = #{memberId}
	</update>
	<!-- 관리자페이지 트레이너 플랫폼 공통 등급 수정 -->
	
	<!-- 관리자페이지 단에서 전체회원 수정  -->
	<update id="modifyMasterMember" parameterType="MemberDto">
		UPDATE tb_common_user
		SET 
			user_pw			= #{memberPw}
			,user_name		= #{memberName}
			,user_email		= #{memberEmail}
			,user_addr		= #{memberAddr}
		WHERE
			user_id = #{memberId}
	</update>

	
	<!-- 관리자 단에서 사용자, 트레이너 전체 조회 -->
	<select id="viewUserList" parameterType="String" resultMap="resultMapMember" >
	SELECT
			user_id, 
			user_level_code, 
			user_pw, 
			user_name, 
			user_addr, 
			user_nickname, 
			user_phone, 
			user_email, 
			user_birth, 
			user_last_login_date,
			user_gender, 
			user_reg_date
	FROM 
		tb_common_user AS c
	WHERE 
		c.user_level_code = #{memberLevel};
	</select>

	
   <!-- 전체 회원 조회 -->
	<select id="viewMember" resultMap="resultMapMember" >
	SELECT
			user_id, 
			user_level_code, 
			user_pw, 
			user_name, 
			user_addr, 
			user_nickname, 
			user_phone, 
			user_email, 
			user_birth, 
			user_gender, 
			user_reg_date
	FROM 
		tb_common_user;
	</select>
	
	<!-- 로그인 , 사용자 및 트레이너 수정 페이지 이동 -->
	<select id="getMemberById" parameterType="String" resultMap="resultMapMember">
	SELECT
			user_id, 
			user_level_code, 
			user_pw, 
			user_name, 
			user_addr, 
			user_nickname, 
			user_phone, 
			user_email, 
			user_birth, 
			user_gender, 
			user_reg_date
		FROM 
			tb_common_user
		WHERE
			user_id = #{userId};
	</select>
	
	
		
	<!-- 아이디 중복 체크 : 아이디가 있으면 1 count, 없으면 0 -->
	<select id = "userIdCheck" parameterType="String" resultType="int">
		SELECT 
			COUNT(*) 
		FROM tb_common_user AS u
			WHERE u.user_id = #{userId};
	</select>
	
	
	<!-- 회원가입 -->
	<insert id="addMember" parameterType="MemberDto">
		INSERT INTO tb_common_user
			(user_id, 
			user_level_code, 
			user_pw, 
			user_name, 
			user_addr, 
			user_nickname, 
			user_phone, 
			user_email, 
			user_birth, 
			user_gender,
			user_last_login_date, 
			user_reg_date)
	VALUES (
			#{memberId}, 
			#{memberLevel}, 
			#{memberPw}, 
			#{memberName}, 
			#{memberAddr}, 
			#{memberNickname}, 
			#{memberPhone}, 
			#{memberEmail}, 
			#{memberBirth},
			#{memberGender},
			NOW(),
			NOW());
	</insert>

	
	<!--트레이너가 자기 본인의 프로모션에 등록된 회원중 한명의 회원의 정보를 가져올때.  -->
	<select id="getTrainerMyMatchingUserInfo" parameterType="String" resultMap="resultMapUser">
		/*트레이너가 자기 본인의 프로모션에 등록된 회원중 한명의 회원의 정보를 가져올때.*/
		SELECT
			u.user_id,
			u.user_first_height,
			u.user_first_weight,
			u.user_first_goal 
		FROM
			tb_user AS u
		where
			u.user_id = #{userId};
	</select>

	<select id="getAllUserId" resultMap="resultMapMember">
		SELECT
			u.user_id
		FROM
			tb_common_user AS u;
		
	</select>

	<!-- 회원 정보 조회-->
	<select id="getMemberSelect" parameterType="String" resultMap="resultMapMember">
		SELECT 
			user_id, 
			user_level_code, 
			user_pw, 
			user_name, 
			user_addr, 
			user_nickname, 
			user_phone, 
			user_email, 
			user_birth, 
			user_gender, 
			user_reg_date
		FROM 
			tb_common_user AS u 
		WHERE 
			u.user_id = #{userId};
	</select>
	
	<!--  	 일단 생략
	<select id="trainerGetMatchingUserList" parameterType="String" resultMap="resultMapNoticePromotionTrainer">
	SELECT
		mut.trainer_user_matching_code AS 'trainerUserMatchingCode',
		mut.user_id AS 'userId'
	FROM
		tb_matching_user_trainer AS mut
	INNER JOIN
		tb_notice_promotion_trainer AS npt
	ON
		mut.trainer_promotion_notice_code = npt.trainer_promotion_notice_code
	where 
		mut.trainer_promotion_notice_code =#{promotionCode};
	</select>
	 -->
	 
	 <!-- 이메일 값을 확인하여 아이디 이메일 존재 여부 확인 limit 1 걸어놓은 이유는 지금 회원가입할때 이메일 중복체크도없고 혹여나 2개가 나오면 에러뜨기때문.-->
	 <select id="find_pw" parameterType="String" resultType="String">
	 	SELECT
			u.user_email
		FROM
			tb_common_user AS u
		WHERE
			u.user_email =#{email}
			LIMIT 1
	 	
	 
	 </select>
	 <!-- 이메일 보내기전 비밀번호값 변경후에 임시 비밀번호 전송해주기위해.  -->
	 <update id="rePw" parameterType="MemberDto">
	 	UPDATE
			tb_common_user
		SET
		user_pw = #{memberPw}
		WHERE 
		user_email =  #{memberEmail};
	 </update>

	
</mapper>